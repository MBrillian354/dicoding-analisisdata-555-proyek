# -*- coding: utf-8 -*-
"""dashboard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YhxSIV9N0rjkC3QH4sMvx0WjamxRPP1u
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from babel.numbers import format_currency

sns.set(style='dark')

def create_df_monthly_orders(df):

  df_monthly_orders = df[df['order_status'] == 'delivered'].resample(rule='M', on='order_approved_at').agg({
    "order_id": "nunique",
    "price": "sum"
    })

  df_monthly_orders = df_monthly_orders.reset_index().rename(columns={
    "order_approved_at": "date",
    "order_id": "order_count",
    "price": "revenue"})

  df_monthly_orders['date'] = df_monthly_orders['date'].dt.strftime('%b %Y')

  return df_monthly_orders

def create_df_monthly_status(df):
    df_monthly_canceled = df_all[df_all['order_status'] == 'canceled'].resample(rule='M', on='order_purchase_timestamp').agg({
        "order_id": "nunique",
        "price": "sum"
    })

    df_monthly_canceled = df_monthly_canceled.reset_index().rename(columns={
        "order_purchase_timestamp": "date",
        "order_id": "cancel_count",
        "price": "revenue"})

    df_monthly_canceled['date'] = df_monthly_canceled['date'].dt.strftime('%b %Y')

    df_monthly_others = df_all[
        (df_all['order_status'] != 'canceled') & (df_all['order_status'] != 'delivered')].resample(rule='M',
                                                                                                   on='order_purchase_timestamp').agg(
        {
            "order_id": "nunique",
            "price": "sum"
        })

    df_monthly_others = df_monthly_others.reset_index().rename(columns={
        "order_purchase_timestamp": "date",
        "order_id": "count",
        "price": "revenue"})

    df_monthly_others['date'] = df_monthly_others['date'].dt.strftime('%b %Y')

    return df_monthly_canceled, df_monthly_others

def create_df_deliver_status(df):
  delivered = df[df['order_status'] == 'delivered'].shape[0]
  canceled = df[df['order_status'] == 'canceled'].shape[0]
  others = df[(df['order_status'] != 'canceled') & (df['order_status'] != 'delivered')].shape[0]
  total = delivered + canceled + others

  statuses_name = ['Delivered', 'Canceled', 'Others']
  statuses_percentage = [delivered/total, canceled/total, others/total]

  return statuses_name, statuses_percentage

def create_df_orders_category_sum(df):
  df_orders_category_sum = df[df['order_status'] == 'delivered'].groupby(by="product_category_name_english").agg({"product_id": "nunique"}).reset_index().rename(columns={
    "product_category_name_english": "category",
    "product_id": "quantity"
    }).sort_values(by='quantity', ascending=False)

  return df_orders_category_sum

def create_df_customer_bystate(df):
  df_customer_bystate = df_all.groupby(by='customer_state').agg({'customer_id':'nunique'}).rename(columns={
    "customer_state": "state",
    "customer_id": "customer_count"}).sort_values(by='customer_count', ascending=False).reset_index()

  return df_customer_bystate

df_all = pd.read_csv("all_data.csv")

datetime_columns = ["order_purchase_timestamp", "order_approved_at", "order_delivered_carrier_date", "order_delivered_customer_date", "order_estimated_delivery_date"]
df_all.sort_values(by="order_purchase_timestamp", inplace=True)
df_all.reset_index(inplace=True)

for column in datetime_columns:
    df_all[column] = pd.to_datetime(df_all[column])

df_all = df_all[(df_all['order_purchase_timestamp'] > '2016-12-31') & (df_all['order_purchase_timestamp'] < '2018-09-30')]

min_date = df_all["order_purchase_timestamp"].min()
max_date = df_all["order_purchase_timestamp"].max()

with st.sidebar:
    st.image("https://storage.googleapis.com/kaggle-organizations/1942/thumbnail.png")

    start_date, end_date = st.date_input(
        label='Rentang Waktu',min_value=min_date,
        max_value=max_date,
        value=[min_date, max_date]
    )

main_df = df_all[(df_all["order_purchase_timestamp"] >= str(start_date)) &
                (df_all["order_purchase_timestamp"] <= str(end_date))]

df_monthly_orders = create_df_monthly_orders(main_df)
df_monthly_canceled, df_monthly_others = create_df_monthly_status(main_df)
statuses_name, statuses_percentage = create_df_deliver_status(main_df)
df_orders_category_sum = create_df_orders_category_sum(main_df)
df_customer_bystate = create_df_customer_bystate(main_df)

st.header('Olist E-Commerce Dashboard :sparkles:')

st.subheader('Orders Status')

col1, col2 = st.columns([4, 2])

with col1:
    colors = ['#52BCF4', '#FF0C04', '#444444']

    fig, ax = plt.subplots(figsize=(16, 8))

    ax.pie(
        x=statuses_percentage,
        colors=colors,
        explode=(0.1, 0.1, 0.1),
        textprops={'fontsize': 35},
        radius = 1
    )

    st.pyplot(fig)

with col2:
    for n in range(3):
        st.metric(statuses_name[n], value=str(round(statuses_percentage[n], 2)) + "%")

st.subheader('Orders Count')

col1, col2 = st.columns(2)

with col1:
    total_orders = df_monthly_orders.order_count.sum()
    st.metric("Total orders", value=total_orders)

with col2:
    total_revenue = format_currency(round(df_monthly_orders.revenue.sum(), 2), "BRL", locale='pt_BR')
    st.metric("Total Revenue", value=total_revenue)

fig, ax = plt.subplots(figsize=(16, 8))
ax.plot(
    df_monthly_orders["date"],
    df_monthly_orders["order_count"],
    linewidth=2,
    color="#52BCF4",
    label = 'Delivered'
)
ax.plot(
    df_monthly_canceled["date"],
    df_monthly_canceled["cancel_count"],
    linewidth=2,
    color="#FF0C04",
    label='Canceled'
)
ax.plot(
    df_monthly_others["date"],
    df_monthly_others["count"],
    linewidth=2,
    color="#444444",
    label = 'Others'
)
ax.legend(fontsize=18)
ax.tick_params(axis='y', labelsize=20)
ax.tick_params(axis='x', labelsize=15, rotation=30)

st.pyplot(fig)


st.write("\n")


st.subheader("Best & Worst Performing Product")

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(32, 16))

colors = ["#52BCF4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(x="quantity", y="category", hue="category", data=df_orders_category_sum.head(5), palette=colors, ax=ax[0], legend=False)
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("Best Performing Category", loc="center", fontsize=55)
ax[0].tick_params(axis ='y', labelsize=40)
ax[0].tick_params(axis ='x', labelsize=40)

sns.barplot(x="quantity", y="category", hue="category", data=df_orders_category_sum.sort_values(by="quantity", ascending=True).head(5), palette=colors, ax=ax[1], legend=False)
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Worst Performing Category", loc="center", fontsize=55)
ax[1].tick_params(axis='y', labelsize=40)
ax[1].tick_params(axis ='x', labelsize=40)

st.pyplot(fig)


st.subheader("Most Customers by State")

fig, ax = plt.subplots(figsize=(24, 10))

colors = ["#52BCF4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(x="customer_count", y="customer_state", hue="customer_state", data=df_customer_bystate.head(5), palette=colors, ax=ax, legend=False)
ax.set_ylabel(None)
ax.set_xlabel(None)
ax.set_title("State with Most Customers", loc="center", fontsize=35)
ax.tick_params(axis ='y', labelsize=25)
ax.tick_params(axis ='x', labelsize=25)

st.pyplot(fig)